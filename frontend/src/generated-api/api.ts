/* tslint:disable */
/* eslint-disable */
/**
 * backend API
 * backend API description
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';

/**
 * 
 * @export
 * @interface AiAnalysisLogEntity
 */
export interface AiAnalysisLogEntity {
    /**
     * 
     * @type {string}
     * @memberof AiAnalysisLogEntity
     */
    'class': string | null;
    /**
     * 
     * @type {number}
     * @memberof AiAnalysisLogEntity
     */
    'confidence': number | null;
    /**
     * 
     * @type {number}
     * @memberof AiAnalysisLogEntity
     */
    'id': number;
    /**
     * 
     * @type {string}
     * @memberof AiAnalysisLogEntity
     */
    'imagePath': string | null;
    /**
     * 
     * @type {string}
     * @memberof AiAnalysisLogEntity
     */
    'message': string | null;
    /**
     * 
     * @type {string}
     * @memberof AiAnalysisLogEntity
     */
    'requestTimestamp': string | null;
    /**
     * 
     * @type {string}
     * @memberof AiAnalysisLogEntity
     */
    'responseTimestamp': string | null;
    /**
     * 
     * @type {string}
     * @memberof AiAnalysisLogEntity
     */
    'success': string | null;
}
/**
 * 
 * @export
 * @interface ImageEntity
 */
export interface ImageEntity {
    /**
     * 
     * @type {object}
     * @memberof ImageEntity
     */
    'data': object | null;
    /**
     * 
     * @type {string}
     * @memberof ImageEntity
     */
    'filePath': string | null;
}
/**
 * 
 * @export
 * @interface SaveAndAnalysisImageRequest
 */
export interface SaveAndAnalysisImageRequest {
    /**
     * 
     * @type {string}
     * @memberof SaveAndAnalysisImageRequest
     */
    'imgData': string;
}
/**
 * 
 * @export
 * @interface SaveAndAnalysisImageResponse
 */
export interface SaveAndAnalysisImageResponse {
    /**
     * 
     * @type {number}
     * @memberof SaveAndAnalysisImageResponse
     */
    'class': number;
    /**
     * 
     * @type {number}
     * @memberof SaveAndAnalysisImageResponse
     */
    'confidence': number;
}

/**
 * AppApi - axios parameter creator
 * @export
 */
export const AppApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} filename 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appControllerGetImage: async (filename: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'filename' is not null or undefined
            assertParamExists('appControllerGetImage', 'filename', filename)
            const localVarPath = `/image/{filename}`
                .replace(`{${"filename"}}`, encodeURIComponent(String(filename)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appControllerGetLatestResults: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/latest-results`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {SaveAndAnalysisImageRequest} saveAndAnalysisImageRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appControllerSaveAndAnalysisImage: async (saveAndAnalysisImageRequest: SaveAndAnalysisImageRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'saveAndAnalysisImageRequest' is not null or undefined
            assertParamExists('appControllerSaveAndAnalysisImage', 'saveAndAnalysisImageRequest', saveAndAnalysisImageRequest)
            const localVarPath = `/save-analysis-image`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(saveAndAnalysisImageRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AppApi - functional programming interface
 * @export
 */
export const AppApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AppApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {string} filename 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async appControllerGetImage(filename: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ImageEntity>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.appControllerGetImage(filename, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AppApi.appControllerGetImage']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async appControllerGetLatestResults(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<AiAnalysisLogEntity>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.appControllerGetLatestResults(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AppApi.appControllerGetLatestResults']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {SaveAndAnalysisImageRequest} saveAndAnalysisImageRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async appControllerSaveAndAnalysisImage(saveAndAnalysisImageRequest: SaveAndAnalysisImageRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SaveAndAnalysisImageResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.appControllerSaveAndAnalysisImage(saveAndAnalysisImageRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AppApi.appControllerSaveAndAnalysisImage']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * AppApi - factory interface
 * @export
 */
export const AppApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AppApiFp(configuration)
    return {
        /**
         * 
         * @param {string} filename 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appControllerGetImage(filename: string, options?: any): AxiosPromise<ImageEntity> {
            return localVarFp.appControllerGetImage(filename, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appControllerGetLatestResults(options?: any): AxiosPromise<Array<AiAnalysisLogEntity>> {
            return localVarFp.appControllerGetLatestResults(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {SaveAndAnalysisImageRequest} saveAndAnalysisImageRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appControllerSaveAndAnalysisImage(saveAndAnalysisImageRequest: SaveAndAnalysisImageRequest, options?: any): AxiosPromise<SaveAndAnalysisImageResponse> {
            return localVarFp.appControllerSaveAndAnalysisImage(saveAndAnalysisImageRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AppApi - object-oriented interface
 * @export
 * @class AppApi
 * @extends {BaseAPI}
 */
export class AppApi extends BaseAPI {
    /**
     * 
     * @param {string} filename 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AppApi
     */
    public appControllerGetImage(filename: string, options?: RawAxiosRequestConfig) {
        return AppApiFp(this.configuration).appControllerGetImage(filename, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AppApi
     */
    public appControllerGetLatestResults(options?: RawAxiosRequestConfig) {
        return AppApiFp(this.configuration).appControllerGetLatestResults(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {SaveAndAnalysisImageRequest} saveAndAnalysisImageRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AppApi
     */
    public appControllerSaveAndAnalysisImage(saveAndAnalysisImageRequest: SaveAndAnalysisImageRequest, options?: RawAxiosRequestConfig) {
        return AppApiFp(this.configuration).appControllerSaveAndAnalysisImage(saveAndAnalysisImageRequest, options).then((request) => request(this.axios, this.basePath));
    }
}



